<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="BASYS3"/>
    <a name="simulationFrequency" val="64.0"/>
    <boardmap boardname="BASYS3">
      <mc key="/ANODE_OUT" pmap="130_234_0,273_234_0,225_234_0,180_234_0"/>
      <mc key="/B_OK" map="487,236"/>
      <mc key="/B_RESET" map="582,238"/>
      <mc key="/B_START" map="536,235"/>
      <mc key="/INPT" pmap="341_323_0,305_323_0,268_323_0,228_323_0,192_323_0,154_323_0,117_323_0,78_323_0"/>
      <mc key="/Output_1" map="538,295"/>
      <mc key="/Output_2" map="577,295"/>
      <mc key="/Output_3" map="612,295"/>
      <mc key="/Output_4" map="649,295"/>
      <mc key="/SSD_OUT" pmap="138_258_0,130_249_0,130_263_0,136_274_0,154_262_0,154_248_0,136_245_0"/>
    </boardmap>
    <comp lib="0" loc="(1060,470)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="ANODE_OUT"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(1060,490)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="SSD_OUT"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1120,630)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="0"/>
      <a name="bit5" val="0"/>
      <a name="bit6" val="0"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="incoming" val="16"/>
    </comp>
    <comp lib="0" loc="(1180,640)" name="Constant">
      <a name="facing" val="west"/>
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(150,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B_OK"/>
    </comp>
    <comp lib="0" loc="(150,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B_START"/>
    </comp>
    <comp lib="0" loc="(150,240)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B_RESET"/>
    </comp>
    <comp lib="0" loc="(280,520)" name="Constant"/>
    <comp lib="0" loc="(40,220)" name="Clock"/>
    <comp lib="0" loc="(780,140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_1"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(780,160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(780,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_3"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(780,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_4"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(870,70)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="INPT"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="3" loc="(1030,210)" name="Adder"/>
    <comp lib="4" loc="(950,260)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1060,470)" name="ssd_decd">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd_decd_1"/>
    </comp>
    <comp loc="(370,100)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_1"/>
    </comp>
    <comp loc="(370,160)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_2"/>
    </comp>
    <comp loc="(370,220)" name="debouncer">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_3"/>
    </comp>
    <comp loc="(550,500)" name="divizor_f">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="divizor_f_1"/>
    </comp>
    <comp loc="(780,140)" name="adder8nr">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="adder8nr_1"/>
    </comp>
    <comp loc="(800,500)" name="ssd_controller">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ssd_controller_1"/>
    </comp>
    <wire from="(1010,290)" to="(1020,290)"/>
    <wire from="(1020,240)" to="(1020,290)"/>
    <wire from="(1020,290)" to="(1020,420)"/>
    <wire from="(1020,420)" to="(1300,420)"/>
    <wire from="(1030,210)" to="(1080,210)"/>
    <wire from="(1080,210)" to="(1080,260)"/>
    <wire from="(1120,620)" to="(1120,630)"/>
    <wire from="(1140,610)" to="(1300,610)"/>
    <wire from="(1140,620)" to="(1140,640)"/>
    <wire from="(1140,640)" to="(1180,640)"/>
    <wire from="(1300,420)" to="(1300,610)"/>
    <wire from="(280,520)" to="(330,520)"/>
    <wire from="(300,330)" to="(300,500)"/>
    <wire from="(300,330)" to="(800,330)"/>
    <wire from="(300,500)" to="(330,500)"/>
    <wire from="(370,100)" to="(420,100)"/>
    <wire from="(370,160)" to="(390,160)"/>
    <wire from="(370,220)" to="(420,220)"/>
    <wire from="(390,160)" to="(390,180)"/>
    <wire from="(390,180)" to="(560,180)"/>
    <wire from="(40,220)" to="(60,220)"/>
    <wire from="(420,100)" to="(420,160)"/>
    <wire from="(420,160)" to="(560,160)"/>
    <wire from="(420,200)" to="(420,220)"/>
    <wire from="(420,200)" to="(490,200)"/>
    <wire from="(490,200)" to="(490,410)"/>
    <wire from="(490,200)" to="(560,200)"/>
    <wire from="(490,410)" to="(570,410)"/>
    <wire from="(550,500)" to="(580,500)"/>
    <wire from="(560,80)" to="(560,140)"/>
    <wire from="(570,410)" to="(570,520)"/>
    <wire from="(570,520)" to="(580,520)"/>
    <wire from="(60,100)" to="(150,100)"/>
    <wire from="(60,100)" to="(60,160)"/>
    <wire from="(60,160)" to="(150,160)"/>
    <wire from="(60,160)" to="(60,220)"/>
    <wire from="(60,220)" to="(150,220)"/>
    <wire from="(60,220)" to="(60,330)"/>
    <wire from="(60,330)" to="(300,330)"/>
    <wire from="(60,80)" to="(560,80)"/>
    <wire from="(60,80)" to="(60,100)"/>
    <wire from="(780,220)" to="(860,220)"/>
    <wire from="(780,240)" to="(830,240)"/>
    <wire from="(800,330)" to="(800,470)"/>
    <wire from="(800,330)" to="(950,330)"/>
    <wire from="(800,470)" to="(840,470)"/>
    <wire from="(800,500)" to="(820,500)"/>
    <wire from="(800,520)" to="(810,520)"/>
    <wire from="(810,490)" to="(810,520)"/>
    <wire from="(810,490)" to="(840,490)"/>
    <wire from="(820,500)" to="(820,510)"/>
    <wire from="(820,510)" to="(840,510)"/>
    <wire from="(830,240)" to="(830,360)"/>
    <wire from="(830,360)" to="(980,360)"/>
    <wire from="(840,530)" to="(840,630)"/>
    <wire from="(840,630)" to="(1120,630)"/>
    <wire from="(860,220)" to="(860,310)"/>
    <wire from="(860,310)" to="(950,310)"/>
    <wire from="(870,70)" to="(900,70)"/>
    <wire from="(900,200)" to="(990,200)"/>
    <wire from="(900,70)" to="(900,200)"/>
    <wire from="(950,260)" to="(1080,260)"/>
    <wire from="(950,260)" to="(950,290)"/>
    <wire from="(970,220)" to="(970,240)"/>
    <wire from="(970,220)" to="(990,220)"/>
    <wire from="(970,240)" to="(1020,240)"/>
    <wire from="(980,350)" to="(980,360)"/>
  </circuit>
  <vhdl name="adder8nr">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY adder8nr IS&#13;
  PORT (&#13;
  	CLK, OK, START, RESETIN: in std_logic;
  	WAITING, LAST, FINISH, INSERT, LOAD, RESET: out std_logic
    );&#13;
END adder8nr;&#13;

&#13;
ARCHITECTURE comportm OF adder8nr IS&#13;
&#13;type STARE_T is (IDLE0, N1, N2, N3, N4, N5, N6, N7, N8, IDLE1);
signal STARE, NXSTARE : STARE_T;
signal PREV_OK, PREV_START: std_logic;
BEGIN&#13;

UPDATE_STARE: process (RESETIN, CLK)
begin
	if (RESETIN = '1') then
		STARE &lt;= IDLE0;
	elsif rising_edge(CLK) then
		STARE &lt;= NXSTARE;
	end if;
end process UPDATE_STARE;

TRANZITII: process(STARE, OK, START)
begin
	WAITING &lt;= '0'; LAST &lt;= '0'; FINISH&lt;= '0'; INSERT &lt;= '0'; LOAD &lt;= '0'; RESET &lt;= '0';
	case stare is
		when IDLE0 =&gt; WAITING &lt;= '1';
			if (START = '0') then
				NXSTARE &lt;= IDLE0;
			else
			   NXSTARE &lt;= N1;
			   RESET &lt;= '1';
			end if;
		when N1 =&gt; 
			if (OK = '1' and PREV_OK = '0') then
				LOAD &lt;= '1';
				NXSTARE &lt;= N2;
			else 
				INSERT &lt;= '1'; 
				NXSTARE &lt;= N1;
				
			end if;
		when N2 =&gt; 
			if (OK = '1' and PREV_OK = '0') then
				LOAD &lt;= '1';
				NXSTARE &lt;= N3;
			else 
				INSERT &lt;= '1';
				NXSTARE &lt;= N2;
			end if;
		when N3 =&gt;
			if (OK = '1' and PREV_OK = '0') then
				LOAD &lt;= '1';
				NXSTARE &lt;= N4;
			else 
				INSERT &lt;= '1';
				NXSTARE &lt;= N3;
			end if;
		when N4 =&gt; 
			if (OK = '1' and PREV_OK = '0') then
				LOAD &lt;= '1';
				NXSTARE &lt;= N5;
			else 
				INSERT &lt;= '1';
				NXSTARE &lt;= N4;
			end if;
		when N5 =&gt; 
			if (OK = '1' and PREV_OK = '0') then
				LOAD &lt;= '1';
				NXSTARE &lt;= N6;
			else 
				INSERT &lt;= '1';
				NXSTARE &lt;= N5;
			end if;
		when N6 =&gt; 
			if (OK = '1' and PREV_OK = '0') then

				LOAD &lt;= '1';
				NXSTARE &lt;= N7;
			else 			
				INSERT &lt;= '1';
				NXSTARE &lt;= N6;
				
			end if;
		when N7 =&gt;
			if (OK = '1' and PREV_OK = '0') then 
				LOAD &lt;= '1';
				NXSTARE &lt;= N8;
			else 
				INSERT &lt;= '1';
				NXSTARE &lt;= N7;
			end if;
		when N8 =&gt; 
			if (OK = '1' and PREV_OK = '0') then
				LOAD &lt;= '1';
				NXSTARE &lt;= IDLE1;
			else 
				INSERT &lt;= '1';
				LAST &lt;= '1';
				NXSTARE &lt;= N8;
			end if;
		when IDLE1 =&gt; FINISH &lt;= '1';
			if (START = '1' and PREV_START = '0') then
				RESET &lt;= '1';
				NXSTARE &lt;= N1;
			else
				FINISH &lt;= '1';
				NXSTARE &lt;= IDLE1;
			end if;

	end case;
	if OK = '1' then PREV_OK &lt;= '1'; else PREV_OK &lt;= '0'; end if;
	if START = '1' then PREV_START &lt;= '1'; else PREV_START &lt;= '0'; end if;
			
end process TRANZITII;
&#13;
&#13;
END comportm;&#13;
</vhdl>
  <vhdl name="debouncer">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY debouncer IS
  PORT (
	CLK, BTN: in std_logic;
	BTN_DB: out std_logic
    );
END debouncer;


ARCHITECTURE structr OF debouncer IS
	component bistabil_d is
	  PORT (
		CLK: in std_logic;
		D, S, R: in std_logic;
		Q: out std_logic
	    );
	END component;

	component POARTA_SI is
		PORT (
		X, Y, Z, A, B: IN std_logic;
		W : OUT std_logic
		);
	END component;

	signal Q2, Q1, Q0, W5, W4: std_logic;

BEGIN
	AP : POARTA_SI port map (Q2, Q1, Q0, W5, W4, BTN_DB);
	D1 : bistabil_d port map(CLK, BTN, '1', '1', Q2);
	D2 : bistabil_d port map(CLK, Q2, '1', '1', Q1);
	D3 : bistabil_d port map(CLK, Q1, '1', '1', Q0);
	D4 : bistabil_d port map(CLK, Q0, '1', '1', W5);
	D5 : bistabil_d port map(CLK, W5, '1', '1', W4);
	

END structr;




LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY bistabil_d IS
  PORT (
	CLK: in std_logic;
	D, S, R: in std_logic;
	Q: out std_logic
    );
END bistabil_d;


ARCHITECTURE compr OF bistabil_d IS

BEGIN

	process(CLK)
	begin
		if rising_edge(CLK) then
			if (S = '0') then
				Q &lt;= '1';
			elsif (R = '0') then
				Q &lt;= '0';
			else 
				Q &lt;= D;
			end if;
		end if;
	end process;

END compr;




LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY divizor_f IS
  PORT (
  	CLK_100: in std_logic;
  	RST: in std_logic;
  	CLK_1: out std_logic
	);
END divizor_f;


ARCHITECTURE comportm OF divizor_f IS

BEGIN

	process(CLK_100)
	variable nr: std_logic_vector (25 downto 0) := (others =&gt; '0');
	begin
		if rising_edge(CLK_100) then
			if RST = '0' then
				nr := (others =&gt; '0');
			else
				nr := nr + 1;
			end if; 
		end if;
		CLK_1 &lt;= nr(25);
	end process;

END comportm;

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
ENTITY POARTA_SI IS
	PORT (
	X, Y, Z, A, B: IN std_logic;
	W : OUT std_logic
	);
END ENTITY;

ARCHITECTURE flux OF POARTA_SI IS
BEGIN
	W &lt;= X AND Y AND Z AND A AND B;
END ARCHITECTURE;
</vhdl>
  <vhdl name="ssd_controller">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY ssd_controller IS
  PORT (
	REDUCED_CLK, RESET: in std_logic;
	ANODE: out std_logic_vector(1 downto 0);
	RESET_DECD: out std_logic
    );
END ssd_controller;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE comprtm OF ssd_controller IS
type STARE_T is (D0, D1, D2, D3);
signal STARE, NXSTARE : STARE_T;
BEGIN

	CTRL: process(REDUCED_CLK, RESET)
	begin
		if RESET = '1' then
			RESET_DECD &lt;= '1';
			STARE &lt;= D0;
		elsif rising_edge(REDUCED_CLK) then
			STARE &lt;= NXSTARE;
			RESET_DECD &lt;= '0';
		end if;
		
	end process CTRL;

	TRANZ: process(STARE)
	
	begin
		ANODE &lt;= "00";
		case STARE is
			when D0 =&gt; ANODE &lt;= "00"; NXSTARE &lt;= D1;
			when D1 =&gt; ANODE &lt;= "01"; NXSTARE &lt;= D2;
			when D2 =&gt; ANODE &lt;= "10"; NXSTARE &lt;= D3;
			when D3 =&gt; ANODE &lt;= "11"; NXSTARE &lt;= D0;
		end case;
	end process TRANZ;
	

END comprtm;
</vhdl>
  <vhdl name="ssd_decd">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

ENTITY ssd_decd IS
  PORT (
  	CLK, RESET: in std_logic;
	ANODE_IN :in std_logic_vector(1 downto 0);
	NR: in std_logic_vector(15 downto 0);
	ANODE_OUT : out std_logic_vector(3 downto 0);
	SSD_OUT: out std_logic_vector(6 downto 0)
    );
END ssd_decd;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE comportm OF ssd_decd IS

signal BIN_NR : std_logic_vector(3 downto 0);
BEGIN

	process(CLK, RESET)
	variable temp: integer;
	begin
--		BIN_NR &lt;= "0000";
--		ANODE_OUT &lt;= "0000";
		if RESET = '1' then		
			ANODE_OUT &lt;= "0000";
			SSD_OUT &lt;= "0000000";
		elsif rising_edge(CLK) then
			--Afisarea se face in hexa dar se poate modifica in zecimal daca trec la integer si tot iau ultima cifra
--			case ANODE_IN is
--				when "00" =&gt; BIN_NR &lt;= NR(3 downto 0); ANODE_OUT &lt;= "0001";
--				when "01" =&gt; BIN_NR &lt;= NR(7 downto 4); ANODE_OUT &lt;= "0010";
--				when "10" =&gt; BIN_NR &lt;= NR(11 downto 8); ANODE_OUT &lt;= "0100";
--				when "11" =&gt; BIN_NR &lt;= NR(15 downto 12); ANODE_OUT &lt;= "1000";
--				when others =&gt; ANODE_OUT &lt;= "0000";
--			end case;
			temp := conv_integer(NR);
			case ANODE_IN is
				when "00" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned(temp rem 10, BIN_NR'length)); ANODE_OUT &lt;= "0001";
				when "01" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned((temp / 10 ) rem 10, BIN_NR'length)); ANODE_OUT &lt;= "0010";
				when "10" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned((temp / 100) rem 10, BIN_NR'length)); ANODE_OUT &lt;= "0100";
				when "11" =&gt; BIN_NR &lt;= std_logic_vector(to_unsigned((temp / 1000) rem 10, BIN_NR'length)); ANODE_OUT &lt;= "1000";
				when others =&gt; ANODE_OUT &lt;= "0000";
			end case;
			
			SSD_OUT &lt;= "0000000";
			case BIN_NR is
				when "0000" =&gt; SSD_OUT &lt;= "1111110";
				when "0001" =&gt; SSD_OUT &lt;= "0110000";
				when "0010" =&gt; SSD_OUT &lt;= "1101101";
				when "0011" =&gt; SSD_OUT &lt;= "1111001";
				when "0100" =&gt; SSD_OUT &lt;= "0110011";
				when "0101" =&gt; SSD_OUT &lt;= "1011011";
				when "0110" =&gt; SSD_OUT &lt;= "0011111";
				when "0111" =&gt; SSD_OUT &lt;= "1110000";
				when "1000" =&gt; SSD_OUT &lt;= "1111111";
				when "1001" =&gt; SSD_OUT &lt;= "1110011";
				when "1010" =&gt; SSD_OUT &lt;= "1110111";
				when "1011" =&gt; SSD_OUT &lt;= "0011111";
				when "1100" =&gt; SSD_OUT &lt;= "1001110";
				when "1101" =&gt; SSD_OUT &lt;= "0111101";
				when "1110" =&gt; SSD_OUT &lt;= "1001111";
				when "1111" =&gt; SSD_OUT &lt;= "1000111";
				when others =&gt; SSD_OUT &lt;= "0000000";
			end case;
		end if;
	end process;

END comportm;
</vhdl>
  <vhdl name="divizor_f">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY divizor_f IS
  PORT (
  	CLK_100: in std_logic;
  	RST: in std_logic;
  	CLK_1: out std_logic
	);
END divizor_f;


ARCHITECTURE comportm OF divizor_f IS

BEGIN

	process(CLK_100)
	variable nr: std_logic_vector (10 downto 0) := (others =&gt; '0');
	begin
		if rising_edge(CLK_100) then
			if RST = '0' then
				nr := (others =&gt; '0');
			else
				nr := nr + 1;
			end if;
		end if;
		CLK_1 &lt;= nr(10);
	end process;

END comportm;
</vhdl>
</project>
