<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(140,170)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(140,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(140,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(140,260)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(530,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp loc="(480,180)" name="mem_ram">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(140,170)" to="(260,170)"/>
    <wire from="(140,200)" to="(260,200)"/>
    <wire from="(140,230)" to="(230,230)"/>
    <wire from="(140,260)" to="(260,260)"/>
    <wire from="(230,220)" to="(230,230)"/>
    <wire from="(230,220)" to="(260,220)"/>
    <wire from="(260,170)" to="(260,180)"/>
    <wire from="(260,240)" to="(260,260)"/>
    <wire from="(480,180)" to="(530,180)"/>
  </circuit>
  <vhdl name="mem_ram">LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
USE ieee.std_logic_unsigned.all;
&#13;
ENTITY mem_ram IS&#13;
  PORT (&#13;
	A_RAM : in std_logic_vector(3 downto 0);
	WE : in std_logic;
	D_RAM : in std_logic_vector(7 downto 0);
	CS_RAM : in std_logic;
	Y_RAM : out std_logic_vector(7 downto 0)
    );&#13;
END mem_ram;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE compl OF mem_ram IS&#13;
	type MATRIX is array(0 to 15) of std_logic_vector(7 downto 0);
	signal mat : MATRIX := (others =&gt; x"00");
BEGIN&#13;
&#13;	process(A_RAM, WE, D_RAM, CS_RAM)
	begin
		if (CS_RAM = '0') then
			Y_RAM &lt;= x"ff";
		else
			if (WE = '0') then
				Y_RAM &lt;= mat(conv_integer(A_RAM));
			else
				mat(conv_integer(A_RAM)) &lt;= D_RAM;
				--Y_RAM &lt;= x"ff";
				Y_RAM &lt;= mat(conv_integer(A_RAM));
			end if;
		end if;
	end process;
&#13;
END compl;&#13;
</vhdl>
</project>
