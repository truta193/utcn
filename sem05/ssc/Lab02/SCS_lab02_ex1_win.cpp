#include <stdio.h>

#define rdtsc __asm __emit 0fh __asm __emit 031h 
#define cpuid __asm __emit 0fh __asm __emit 0a2h

int main() {

	unsigned cycles_high1 = 0, cycles_low1 = 0, cpuid_time = 0;
	unsigned cycles_high2 = 0, cycles_low2 = 0;
	unsigned __int64 temp_cycles1 = 0, temp_cycles2 = 0;
	__int64 total_cycles = 0;
	// declare unsigned and float variables to be used

	// compute the CPUID overhead 
	__asm {
		; call the cpuid instruction three times and use the value generated by the 3rd call
		pushad
		cpuid
		rdtsc
		mov cycles_high1, edx
		mov cycles_low1, eax
		popad
		pushad
		cpuid
		rdtsc
		popad

		pushad
		cpuid
		rdtsc
		mov cycles_high1, edx
		mov cycles_low1, eax
		popad
		pushad
		cpuid
		rdtsc
		popad

		pushad
		cpuid
		rdtsc
		mov cycles_high1, edx
		mov cycles_low1, eax
		popad
		pushad
		cpuid
		rdtsc
		sub eax, cycles_low1
		mov cpuid_time, eax
		popad
	}

	// reset the values of cycles_high1 and cycles_low1
	cycles_high1 = 0;
	cycles_low1 = 0;

	// measure the code sequence
	__asm {
		pushad
		cpuid
		rdtsc
		mov cycles_high1, edx
		mov cycles_low1, eax
		popad
	}

	// section of code to be measured
	__asm {
		cpuid
	}

	__asm {
		pushad
		cpuid
		rdtsc
		mov cycles_high2, edx
		mov cycles_low2, eax
		popad
	}
	temp_cycles1 = ((unsigned __int64)cycles_high1 << 32) | cycles_low1;
	temp_cycles2 = ((unsigned __int64)cycles_high2 << 32) | cycles_low2;
	total_cycles = temp_cycles2 - temp_cycles1 - cpuid_time;

	printf("CPUID overhead = %u\n", cpuid_time);
	printf("Cycles (before) = %llu\n", temp_cycles1);
	printf("Cycles (after) = %llu\n", temp_cycles2);
	printf("Total cycles = %lld\n", total_cycles);

	return 0;
}